import { observer } from "mobx-react";
import type { NextPage } from "next";
import Head from "next/head";
import { Dispatch, SetStateAction, useRef, useState } from "react";
import { Editor } from "../components/editor";
import { Navigation } from "../components/navigation";
import { defaultTemplate } from "../data/defaultTemplate";
import {
  createBookmarklet,
  createBookmarkletHacky,
  createIssueURL,
} from "../lib/bookmarklet";
import { ui, UiState } from "../state/ui.state";
import styles from "../styles/Home.module.css";

enum ButtonTexts {
  COPIED = "Copied!",
  INITIAL = "Copy Bookmarklet",
  INITIAL_HACKY = "Copy Bookmarklet (hacky)",
}

const App = observer((props: { ui: UiState }) => {
  const timeoutRef = useRef<any>();
  const [buttonText, setButtonText] = useState(ButtonTexts.INITIAL);
  const [hackyButtonText, setHackyButtonText] = useState(
    ButtonTexts.INITIAL_HACKY
  );
  const [template, setTemplate] = useState(defaultTemplate);

  function toggleButton(
    bookmarkletFn: (x: string) => string,
    setTextFn: Dispatch<SetStateAction<ButtonTexts>>,
    initialText: ButtonTexts
  ) {
    return () => {
      navigator.clipboard.writeText(bookmarkletFn(template)).then(
        function () {
          setTextFn(ButtonTexts.COPIED);
          if (timeoutRef.current) {
            clearTimeout(timeoutRef.current);
          }

          timeoutRef.current = setTimeout(() => {
            setTextFn(initialText);
          }, 1000);
        },
        function (err) {
          console.error("Failed to copy!", err);
        }
      );
    };
  }

  const activeEditor = ui.getActiveEditor();

  return (
    <main className={styles.main}>
      <div className={styles.container}>
        <p className={styles.p}>
          Create a bookmarklet that pastes the following template into the issue
          description in Jira.
        </p>

        <div className={styles.templateEditor}>
          <Navigation ui={ui}></Navigation>

          <Editor ui={ui}></Editor>

          <div className={styles.buttonWrapper}>
            <a
              className={`${styles.button} ${
                !ui.config.jiraBaseUrl || !activeEditor ? styles.disabled : ""
              }`}
              href={createIssueURL(
                ui.config.jiraBaseUrl,
                activeEditor?.template || "",
                ui.config.projectId,
                ui.config.issueType
              )}
            >
              Create Issue
            </a>
          </div>
        </div>
      </div>
    </main>
  );
});

const Home: NextPage = () => {
  return (
    <div className={styles.container}>
      <Head>
        <title>Jira Templates Bookmarklet</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <App ui={ui}></App>
    </div>
  );
};

export default Home;
